--- a/lib/uuid/gen_uuid.c	2009-08-13 02:39:57 +0100
+++ b/lib/uuid/gen_uuid.c	2012-01-22 15:49:46 +0000
@@ -57,7 +57,9 @@
 #ifdef HAVE_SYS_TIME_H
 #include <sys/time.h>
 #endif
+#ifndef _WIN32
 #include <sys/wait.h>
+#endif
 #include <sys/stat.h>
 #ifdef HAVE_SYS_FILE_H
 #include <sys/file.h>
@@ -110,7 +112,7 @@
 #endif
 
 #ifdef _WIN32
-static void gettimeofday (struct timeval *tv, void *dummy)
+static void gettimeofday_win (struct timeval *tv, void *dummy)
 {
 	FILETIME	ftime;
 	uint64_t	n;
@@ -131,6 +133,7 @@
 {
 	return 1;
 }
+#define gettimeofday gettimeofday_win
 #endif
 
 static int get_random_fd(void)
@@ -301,7 +304,7 @@
 
 /* Assume that the gettimeofday() has microsecond granularity */
 #define MAX_ADJUSTMENT 10
-
+#ifndef _WIN32
 static int get_clock(uint32_t *clock_high, uint32_t *clock_low,
 		     uint16_t *ret_clock_seq, int *num)
 {
@@ -465,7 +468,7 @@
 			open("/dev/null", O_RDWR);
 	}
 }
-
+#endif
 
 /*
  * Try using the uuidd daemon to generate the UUID
@@ -550,6 +553,7 @@
 	return -1;
 }
 
+#ifndef _WIN32
 void uuid__generate_time(uuid_t out, int *num)
 {
 	static unsigned char node_id[6];
@@ -619,7 +623,7 @@
 
 	uuid__generate_time(out, 0);
 }
-
+#endif
 
 void uuid__generate_random(uuid_t out, int *num)
 {
@@ -661,8 +665,12 @@
  */
 void uuid_generate(uuid_t out)
 {
+#ifdef _WIN32
+	uuid_generate_random(out);
+#else
 	if (get_random_fd() >= 0)
 		uuid_generate_random(out);
 	else
 		uuid_generate_time(out);
+#endif
 }
--- a/lib/uuid/tst_uuid.c	2012-01-22 15:53:03 +0000
+++ b/lib/uuid/tst_uuid.c	2012-01-22 15:55:09 +0000
@@ -114,7 +114,7 @@
 		failed++;
 	}
 	printf("\n");
-
+#ifndef _WIN32
 	uuid_generate_time(buf);
 	uuid_unparse(buf, str);
 	printf("UUID string = %s\n", str);
@@ -160,6 +160,7 @@
 		printf("UUID copy and compare failed!\n");
 		failed++;
 	}
+#endif
 	failed += test_uuid("84949cc5-4701-4a84-895b-354c584a981b", 1);
 	failed += test_uuid("84949CC5-4701-4A84-895B-354C584A981B", 1);
 	failed += test_uuid("84949cc5-4701-4a84-895b-354c584a981bc", 0);
