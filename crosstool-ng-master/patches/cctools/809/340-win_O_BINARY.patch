diff -urN a/ar/append.c b/ar/append.c
--- a/ar/append.c	2013-10-07 17:09:18.082585255 +0100
+++ b/ar/append.c	2013-10-07 17:09:18.449257571 +0100
@@ -93,7 +93,7 @@
 	CF cf;
 	struct stat sb;
 
-	afd = open_archive(O_CREAT|O_RDWR);
+	afd = open_archive(O_CREAT|O_RDWR|O_BINARY);
 	if (lseek(afd, (off_t)0, SEEK_END) == (off_t)-1)
 		error(archive);
 
diff -urN a/ar/archive.c b/ar/archive.c
--- a/ar/archive.c	2013-10-07 17:09:18.082585255 +0100
+++ b/ar/archive.c	2013-10-07 17:09:18.449257571 +0100
@@ -100,7 +100,7 @@
 	created = 0;
 	if (mode & O_CREAT) {
 		mode |= O_EXCL;
-		if ((fd = open(archive, mode, DEFFILEMODE)) >= 0) {
+		if ((fd = open(archive, mode|O_BINARY, DEFFILEMODE)) >= 0) {
 			/* POSIX.2 puts create message on stderr. */
 			if (!(options & AR_C))
 				warnx("creating archive %s", archive);
@@ -111,7 +111,7 @@
 			error(archive);
 		mode &= ~O_EXCL;
 	}
-	if ((fd = open(archive, mode, DEFFILEMODE)) < 0)
+	if ((fd = open(archive, mode|O_BINARY, DEFFILEMODE)) < 0)
 		error(archive);
 
 	if((mode & O_ACCMODE) == O_RDONLY)
diff -urN a/ar/extract.c b/ar/extract.c
--- a/ar/extract.c	2013-10-07 17:09:18.082585255 +0100
+++ b/ar/extract.c	2013-10-07 17:09:18.449257571 +0100
@@ -117,7 +117,7 @@
 		    sb.st_mtime > chdr.date)
 			continue;
 
-		if ((tfd = open(file, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR)) < 0) {
+		if ((tfd = open(file, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, S_IWUSR)) < 0) {
 			warn("%s", file);
 			skip_arobj(afd);
 			eval = 1;
diff -urN a/ar/replace.c b/ar/replace.c
--- a/ar/replace.c	2013-10-07 17:09:18.082585255 +0100
+++ b/ar/replace.c	2013-10-07 17:09:18.449257571 +0100
@@ -104,7 +104,7 @@
 	 * a race here, but it's pretty short, and not worth fixing.
 	 */
 	exists = !stat(archive, &sb);
-	afd = open_archive(O_CREAT|O_RDWR);
+	afd = open_archive(O_CREAT|O_RDWR|O_BINARY);
 
 	if (!exists) {
 		tfd1 = -1;
@@ -125,7 +125,7 @@
 	mods = (options & (AR_A|AR_B));
 	for (curfd = tfd1; get_arobj(afd);) {
 		if (*argv && (file = files(argv))) {
-			if ((sfd = open(file, O_RDONLY)) < 0) {
+			if ((sfd = open(file, O_RDONLY|O_BINARY)) < 0) {
 				errflg = 1;
 				warn("%s", file);
 				goto useold;
@@ -173,7 +173,7 @@
 append:	while ((file = *argv++)) {
 		if (options & AR_V)
 			(void)printf("a - %s\n", file);
-		if ((sfd = open(file, O_RDONLY)) < 0) {
+		if ((sfd = open(file, O_RDONLY|O_BINARY)) < 0) {
 			errflg = 1;
 			warn("%s", file);
 			continue;
diff -urN a/as/write_object.c b/as/write_object.c
--- a/as/write_object.c	2013-10-07 17:09:18.125919255 +0100
+++ b/as/write_object.c	2013-10-07 17:09:18.492591598 +0100
@@ -633,7 +633,7 @@
 	    if(stat_buf.st_mode & S_IFREG)
 		(void)unlink(out_file_name);
 	}
-	if((fd = open(out_file_name, O_WRONLY | O_CREAT | O_TRUNC, 0666)) == -1)
+	if((fd = open(out_file_name, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0666)) == -1)
 	    as_fatal("can't create output file: %s", out_file_name);
 	if(write(fd, output_addr, output_size) != (int)output_size)
 	    as_fatal("can't write output file");
diff -urN a/dyld/launch-cache/dsc_extractor.cpp b/dyld/launch-cache/dsc_extractor.cpp
--- a/dyld/launch-cache/dsc_extractor.cpp	2013-10-07 17:09:18.029251087 +0100
+++ b/dyld/launch-cache/dsc_extractor.cpp	2013-10-07 17:09:18.395923421 +0100
@@ -395,7 +395,7 @@
             make_dirs(dylib_path);
             
             // open file, create if does not already exist
-            int fd = ::open(dylib_path, O_CREAT | O_EXLOCK | O_RDWR, 0644);
+            int fd = ::open(dylib_path, O_CREAT | O_EXLOCK | O_RDWR | O_BINARY, 0644);
             if ( fd == -1 ) {
                 fprintf(stderr, "can't open or create dylib file %s, errnor=%d\n", dylib_path, errno);
                 cumulativeResult    = -1;
diff -urN a/dyld/launch-cache/update_dyld_shared_cache.cpp b/dyld/launch-cache/update_dyld_shared_cache.cpp
--- a/dyld/launch-cache/update_dyld_shared_cache.cpp	2013-10-07 17:09:18.029251087 +0100
+++ b/dyld/launch-cache/update_dyld_shared_cache.cpp	2013-10-07 17:09:18.395923421 +0100
@@ -2732,7 +2732,7 @@
 				}
 				
 				// create temp file for cache
-				int fd = ::open(tempCachePath, O_CREAT | O_RDWR | O_TRUNC, 0644);	
+				int fd = ::open(tempCachePath, O_CREAT | O_RDWR | O_TRUNC | O_BINARY | O_BINARY, 0644);	
 				if ( fd == -1 )
 					throwf("can't create temp file %s, errnor=%d", tempCachePath, errno);
 					
diff -urN a/efitools/makerelocs.c b/efitools/makerelocs.c
--- a/efitools/makerelocs.c	2013-10-07 17:09:18.125919255 +0100
+++ b/efitools/makerelocs.c	2013-10-07 17:09:18.492591598 +0100
@@ -440,7 +440,7 @@
 	       (nbase_reloc + 1) * sizeof(struct base_relocation_entry);
 	fb = malloc(size);
 	
-	f = open(out, O_WRONLY|O_CREAT|O_TRUNC, 0644);
+	f = open(out, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
 	if(f == -1){
 	    fatal("open output file");
 	}
diff -urN a/efitools/mtoc.c b/efitools/mtoc.c
--- a/efitools/mtoc.c	2013-10-07 17:09:18.125919255 +0100
+++ b/efitools/mtoc.c	2013-10-07 17:09:18.492591598 +0100
@@ -1625,7 +1625,7 @@
 	/*
 	 * Create the pecoff file and write the buffer to the file.
 	 */
-	f = open(out, O_WRONLY|O_CREAT|O_TRUNC, 0644);
+	f = open(out, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
 	if(f == -1)
 	    system_fatal("Can't create output file: %s", out);
 
diff -urN a/ld/rld.c b/ld/rld.c
--- a/ld/rld.c	2013-10-07 17:09:18.082585255 +0100
+++ b/ld/rld.c	2013-10-07 17:09:18.449257571 +0100
@@ -629,7 +629,7 @@
 			  sizeof(struct nlist) +
 			  output_symtab_info.symtab_command.strsize;
 	    (void)unlink(output_filename);
-	    if((fd = open(output_filename, O_WRONLY | O_CREAT | O_TRUNC,
+	    if((fd = open(output_filename, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY,
 			  0666)) == -1){
 		system_error("can't create output file: %s", output_filename);
 #ifdef KLD
@@ -1676,7 +1676,7 @@
 		      sizeof(struct nlist) +
 		      output_symtab_info.symtab_command.strsize;
 	(void)unlink(output_filename);
-	if((fd = open(output_filename, O_WRONLY | O_CREAT | O_TRUNC,
+	if((fd = open(output_filename, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY,
 		      0666)) == -1){
 	    system_error("can't create output file: %s", output_filename);
 	    return_value = 0;
diff -urN a/ld64/src/ld/Options.cpp b/ld64/src/ld/Options.cpp
--- a/ld64/src/ld/Options.cpp	2013-10-07 17:09:18.085918632 +0100
+++ b/ld64/src/ld/Options.cpp	2013-10-07 17:09:18.455924360 +0100
@@ -348,7 +348,7 @@
 void Options::loadSymbolOrderFile(const char* fileOfExports, NameToOrder& orderMapping)
 {
 	// read in whole file
-	int fd = ::open(fileOfExports, O_RDONLY, 0);
+	int fd = ::open(fileOfExports, O_RDONLY|O_BINARY, 0);
 	if ( fd == -1 )
 		throwf("can't open -exported_symbols_order file: %s", fileOfExports);
 	struct stat stat_buf;
@@ -1109,7 +1109,7 @@
 	if ( fileOfExports == NULL )
 		throwf("missing file after %s", option);
 	// read in whole file
-	int fd = ::open(fileOfExports, O_RDONLY, 0);
+	int fd = ::open(fileOfExports, O_RDONLY|O_BINARY, 0);
 	if ( fd == -1 )
 		throwf("can't open %s file: %s", option, fileOfExports);
 	struct stat stat_buf;
@@ -1179,7 +1179,7 @@
 void Options::parseAliasFile(const char* fileOfAliases)
 {
 	// read in whole file
-	int fd = ::open(fileOfAliases, O_RDONLY, 0);
+	int fd = ::open(fileOfAliases, O_RDONLY|O_BINARY, 0);
 	if ( fd == -1 )
 		throwf("can't open alias file: %s", fileOfAliases);
 	struct stat stat_buf;
@@ -1527,7 +1527,7 @@
 	fAutoOrderInitializers = false;
 
 	// read in whole file
-	int fd = ::open(path, O_RDONLY, 0);
+	int fd = ::open(path, O_RDONLY|O_BINARY, 0);
 	if ( fd == -1 )
 		throwf("can't open order file: %s", path);
 	struct stat stat_buf;
@@ -1657,7 +1657,7 @@
 	}
 
 	// read in whole file
-	int fd = ::open(path, O_RDONLY, 0);
+	int fd = ::open(path, O_RDONLY|O_BINARY, 0);
 	if ( fd == -1 )
 		throwf("can't open -sectcreate file: %s", path);
 	struct stat stat_buf;
diff -urN a/ld64/src/ld/OutputFile.cpp b/ld64/src/ld/OutputFile.cpp
--- a/ld64/src/ld/OutputFile.cpp	2013-10-07 17:09:18.089252010 +0100
+++ b/ld64/src/ld/OutputFile.cpp	2013-10-07 17:09:18.459257738 +0100
@@ -1714,7 +1714,7 @@
 	}
 
 	// write whole output file in one chunk
-	int fd = open(_options.outputFilePath(), O_CREAT | O_WRONLY | O_TRUNC, permissions);
+	int fd = open(_options.outputFilePath(), O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, permissions);
 	if ( fd == -1 ) 
 		throwf("can't open output file for writing: %s, errno=%d", _options.outputFilePath(), errno);
 	if ( ::pwrite(fd, wholeBuffer, _fileSize, 0) == -1 )
diff -urN a/ld64/src/ld/lto_file.hpp b/ld64/src/ld/lto_file.hpp
--- a/ld64/src/ld/lto_file.hpp	2013-10-07 17:09:18.089252010 +0100
+++ b/ld64/src/ld/lto_file.hpp	2013-10-07 17:09:18.459257738 +0100
@@ -547,7 +547,7 @@
         char tempMachoPath[MAXPATHLEN];
         strcpy(tempMachoPath, outputFilePath);
         strcat(tempMachoPath, ".lto.o");
-        int fd = ::open(tempMachoPath, O_CREAT | O_WRONLY | O_TRUNC, 0666);
+        int fd = ::open(tempMachoPath, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0666);
 		if ( fd != -1) {
 			::write(fd, machOFile, machOFileLen);
 			::close(fd);
diff -urN a/ld64/src/ld/parsers/lto_file.cpp b/ld64/src/ld/parsers/lto_file.cpp
--- a/ld64/src/ld/parsers/lto_file.cpp	2013-10-07 17:09:18.089252010 +0100
+++ b/ld64/src/ld/parsers/lto_file.cpp	2013-10-07 17:09:18.455924360 +0100
@@ -649,7 +649,7 @@
         char tempMachoPath[MAXPATHLEN];
         strcpy(tempMachoPath, options.outputFilePath);
         strcat(tempMachoPath, ".lto.o");
-        int fd = ::open(tempMachoPath, O_CREAT | O_WRONLY | O_TRUNC, 0666);
+        int fd = ::open(tempMachoPath, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0666);
 		if ( fd != -1) {
 			::write(fd, machOFile, machOFileLen);
 			::close(fd);
@@ -663,7 +663,7 @@
 
 	// if needed, save temp mach-o file to specific location
 	if ( options.tmpObjectFilePath != NULL ) {
-		int fd = ::open(options.tmpObjectFilePath, O_CREAT | O_WRONLY | O_TRUNC, 0666);
+		int fd = ::open(options.tmpObjectFilePath, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0666);
 		if ( fd != -1) {
 			::write(fd, machOFile, machOFileLen);
 			::close(fd);
diff -urN a/ld64/src/other/rebase.cpp b/ld64/src/other/rebase.cpp
--- a/ld64/src/other/rebase.cpp	2013-10-07 17:09:18.085918632 +0100
+++ b/ld64/src/other/rebase.cpp	2013-10-07 17:09:18.452590935 +0100
@@ -122,7 +122,7 @@
  : fMappingAddress(0), fFileSize(0)
 {
 	// map in whole file
-	int fd = ::open(path, (writable ? O_RDWR : O_RDONLY), 0);
+	int fd = ::open(path, (writable ? O_RDWR|O_BINARY : O_RDONLY|O_BINARY), 0);
 	if ( fd == -1 )
 		throwf("can't open file %s, errno=%d", path, errno);
 	struct stat stat_buf;
@@ -782,7 +782,7 @@
 		
 	// create new file with all same permissions to hold copy of dylib 
 	::unlink(dstFile);
-	int dst = open(dstFile, O_CREAT | O_RDWR | O_TRUNC, stat_buf.st_mode);	
+	int dst = open(dstFile, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, stat_buf.st_mode);	
 	if ( dst == -1 )
 		throwf("can't create temp file %s, errnor=%d", dstFile, errno);
 
diff -urN a/libstuff/ofile.c b/libstuff/ofile.c
--- a/libstuff/ofile.c	2013-10-07 17:09:18.062584913 +0100
+++ b/libstuff/ofile.c	2013-10-07 17:09:18.429257252 +0100
@@ -839,7 +839,7 @@
 	memset(ofile, '\0', sizeof(struct ofile));
 
 	/* Open the file and map it in */
-	if((fd = open(file_name, O_RDONLY)) == -1){
+	if((fd = open(file_name, O_RDONLY|O_BINARY)) == -1){
 #ifdef OFI
 	    return(NSObjectFileImageAccess);
 #else
diff -urN a/libstuff/writeout.c b/libstuff/writeout.c
--- a/libstuff/writeout.c	2013-10-07 17:09:18.062584913 +0100
+++ b/libstuff/writeout.c	2013-10-07 17:09:18.429257252 +0100
@@ -144,7 +144,7 @@
 	else
 	    fsync = 0;
         if(output != NULL){
-            if((fd = open(output, O_WRONLY|O_CREAT|O_TRUNC|fsync, mode)) == -1){
+            if((fd = open(output, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY|fsync, mode)) == -1){
                 system_error("can't create output file: %s", output);
                 goto cleanup;
             }
diff -urN a/misc/libtool.c b/misc/libtool.c
--- a/misc/libtool.c	2013-10-07 17:09:18.062584913 +0100
+++ b/misc/libtool.c	2013-10-07 17:09:18.432590639 +0100
@@ -2382,7 +2382,7 @@
 	    if(same_toc == FALSE)
 		p = put_toc_member(p, archs+0, host_byte_sex, target_byte_sex);
 
-	    if((fd = open(output, O_WRONLY, 0)) == -1){
+	    if((fd = open(output, O_WRONLY | O_BINARY, 0)) == -1){
 		system_error("can't open output file: %s", output);
 		return;
 	    }
@@ -2414,7 +2414,7 @@
 	 * of the unlink() is ignored).
 	 */
 	(void)unlink(output);
-	if((fd = open(output, O_WRONLY | O_CREAT | O_TRUNC, 0666)) == -1){
+	if((fd = open(output, O_WRONLY | O_BINARY | O_CREAT | O_TRUNC, 0666)) == -1){
 	    system_error("can't create output file: %s", output);
 	    return;
 	}
@@ -2605,7 +2605,7 @@
 	    system_fatal("can't stat file output file: %s", output);
 	    return;
 	}
-	if((fd = open(output, O_WRONLY, 0)) == -1){
+	if((fd = open(output, O_WRONLY | O_BINARY, 0)) == -1){
 	    system_error("can't open output file: %s", output);
 	    return;
 	}
@@ -3975,7 +3975,7 @@
 
 	if(trace_file == -1){
 		if(cmd_flags.trace_file_path != NULL){
-			trace_file = open(cmd_flags.trace_file_path, O_WRONLY | O_APPEND | O_CREAT, 0666);
+			trace_file = open(cmd_flags.trace_file_path, O_WRONLY | O_BINARY | O_APPEND | O_CREAT, 0666);
 			if(trace_file == -1)
 				error("Could not open or create trace file: %s\n", cmd_flags.trace_file_path);
 		}
diff -urN a/misc/lipo.c b/misc/lipo.c
--- a/misc/lipo.c	2013-10-07 17:09:18.062584913 +0100
+++ b/misc/lipo.c	2013-10-07 17:09:18.429257252 +0100
@@ -560,7 +560,7 @@
 		   (thin_files[i].fat_arch.cpusubtype & ~CPU_SUBTYPE_MASK) ==
 		   (thin_arch_flag.cpusubtype & ~CPU_SUBTYPE_MASK)){
 		    (void)unlink(output_file);
-		    if((fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC,
+		    if((fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY,
 				  output_filemode)) == -1)
 			system_fatal("can't create output file: %s",
 				     output_file);
@@ -881,7 +881,7 @@
 	 * may not be there the return code of the unlink() is ignored).
 	 */
 	(void)unlink(output_file);
-	if((fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC,
+	if((fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY,
 		      output_filemode)) == -1)
 	    system_fatal("can't create output file: %s", output_file);
 
diff -urN a/misc/segedit.c b/misc/segedit.c
--- a/misc/segedit.c	2013-10-07 17:09:18.062584913 +0100
+++ b/misc/segedit.c	2013-10-07 17:09:18.432590639 +0100
@@ -249,7 +249,7 @@
     struct symseg_command *ssp;
 
 	/* Open the input file and map it in */
-	if((fd = open(input, O_RDONLY)) == -1)
+	if((fd = open(input, O_RDONLY|O_BINARY)) == -1)
 	    system_fatal("can't open input file: %s", input);
 	if(fstat(fd, &stat_buf) == -1)
 	    system_fatal("Can't stat input file: %s", input);
@@ -460,7 +460,7 @@
 			  "end of the file) in: %s", segname,
 			  sectname, input);
 		 if((fd = open(ep->filename, O_WRONLY | O_CREAT |
-			       O_TRUNC, 0666)) == -1)
+			       O_TRUNC | O_BINARY, 0666)) == -1)
 		    system_fatal("can't create: %s", ep->filename);
 		 if(write(fd, (char *)input_addr + offset,
 			 size) != (int)size)
@@ -877,7 +877,7 @@
 	 * commands, then the segments with any new sections and finally
 	 * the link edit info.
 	 */
-	if((outfd = open(output, O_CREAT | O_WRONLY | O_TRUNC ,input_mode)) 
+	if((outfd = open(output, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY,input_mode)) 
 	   == -1)
 	    system_fatal("can't create output file: %s", output);
 
@@ -895,7 +895,7 @@
 			sp = sects[k + j].sp;
 			rp = sects[k + j].rp;
 			if(rp != NULL){
-			    if((sectfd = open(rp->filename, O_RDONLY)) == -1)
+			    if((sectfd = open(rp->filename, O_RDONLY|O_BINARY)) == -1)
 				system_fatal("can't open file: %s to replace "
 					 "section (%s,%s) with", rp->filename,
 					 rp->segname, rp->sectname);
@@ -950,7 +950,7 @@
 			sp64 = sects[k + j].sp64;
 			rp = sects[k + j].rp;
 			if(rp != NULL){
-			    if((sectfd = open(rp->filename, O_RDONLY)) == -1)
+			    if((sectfd = open(rp->filename, O_RDONLY|O_BINARY)) == -1)
 				system_fatal("can't open file: %s to replace "
 					 "section (%s,%s) with", rp->filename,
 					 rp->segname, rp->sectname);
diff -urN a/misc/strip.c b/misc/strip.c
--- a/misc/strip.c	2013-10-07 17:09:18.062584913 +0100
+++ b/misc/strip.c	2013-10-07 17:09:18.432590639 +0100
@@ -683,7 +683,7 @@
 		 * the current working directory to that path.
 		 */
 		if((p = rindex(output_file, '/')) != NULL){
-		    if((cwd_fd = open(".", O_RDONLY, 0)) == -1){
+		    if((cwd_fd = open(".", O_RDONLY|O_BINARY, 0)) == -1){
 			system_error("can't open current working directory");
 			goto strip_file_return;
 		    }
@@ -2383,7 +2383,7 @@
     struct stat stat_buf;
     char *strings, *p;
 
-	if((fd = open(dfile, O_RDONLY)) < 0){
+	if((fd = open(dfile, O_RDONLY|O_BINARY)) < 0){
 	    system_error("can't open: %s", dfile);
 	    return;
 	}
@@ -3798,7 +3798,7 @@
 	input_file = makestr("/tmp/strip.XXXXXX", NULL);
 	input_file = mktemp(input_file);
 
-	if((fd = open(input_file, O_WRONLY|O_CREAT, 0600)) < 0)
+	if((fd = open(input_file, O_WRONLY|O_CREAT|O_BINARY, 0600)) < 0)
 	    system_fatal("can't open temporary file: %s", input_file);
 
 	if(write(fd, object->object_addr, object->object_size) !=
