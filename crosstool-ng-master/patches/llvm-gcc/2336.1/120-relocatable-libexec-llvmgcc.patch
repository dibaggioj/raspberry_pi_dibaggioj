diff -urN a/driverdriver.c b/driverdriver.c
--- a/driverdriver.c	2013-05-31 00:32:09.556752184 +0100
+++ b/driverdriver.c	2013-05-31 00:32:10.311758171 +0100
@@ -31,7 +31,36 @@
 #include <limits.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <sys/wait.h>
+#if !defined(__MINGW32__)
+ #include <sys/wait.h>
+#else
+ #define WINVER 0x0600
+ #define _WIN32_WINNT 0x0600
+ #define WIN32_LEAN_AND_MEAN
+ #include <windows.h>
+
+ #ifndef WIFSIGNALED
+ #define WIFSIGNALED(S) (((S) & 0xff) != 0 && ((S) & 0xff) != 0x7f)
+ #endif
+ #ifndef WTERMSIG
+ #define WTERMSIG(S) ((S) & 0x7f)
+ #endif
+ #ifndef WIFEXITED
+ #define WIFEXITED(S) (((S) & 0xff) == 0)
+ #endif
+ #ifndef WEXITSTATUS
+ #define WEXITSTATUS(S) (((S) & 0xff00) >> 8)
+ #endif
+ #ifndef WSTOPSIG
+ #define WSTOPSIG WEXITSTATUS
+ #endif
+ #ifndef WCOREDUMP
+ #define WCOREDUMP(S) ((S) & WCOREFLG)
+ #endif
+ #ifndef WCOREFLG
+ #define WCOREFLG 0200
+ #endif
+#endif
 #include <regex.h>
 #include "libiberty.h"
 #include "filenames.h"
@@ -175,10 +204,10 @@
 static void initialize (void);
 static void final_cleanup (void);
 static int do_wait (int, const char *);
-static void do_lipo (int, const char *);
+static void do_lipo (int, const char *, const char *);
 static void do_compile (const char **, int);
 static void do_compile_separately (void);
-static void do_lipo_separately (void);
+static void do_lipo_separately (const char *);
 static int filter_args_for_arch (const char **, int, const char **,
 				 const char *);
 static int add_arch_options (int, const char **, int);
@@ -442,7 +471,7 @@
   /* Need separate out_files for each arch, max is MAX_ARCHES.
      Need separate out_files for each input file.  */
 
-  out_files = (const char **) malloc ((total_argc * MAX_ARCHES) * sizeof (const char *));
+  out_files = (const char **) calloc ((total_argc * MAX_ARCHES), sizeof (const char *));
   if (!out_files)
     abort ();
 
@@ -513,13 +542,22 @@
 /* Invoke 'lipo' and combine and all output files.  */
 
 static void
-do_lipo (int start_outfile_index, const char *out_file)
+do_lipo (int start_outfile_index, const char *out_file, const char *argv_0)
 {
   int i, j, pid;
   char *errmsg_fmt, *errmsg_arg;
+  char buf[1024];
 
   /* Populate lipo arguments.  */
-  lipo_argv[0] = "lipo";
+  strcpy(buf,argv_0);
+  /* Don't deal with Windows backslashes, argv_0 already
+     normalised to Unix */
+  if (strrchr(buf,'/'))
+  {
+     *(strrchr(buf,'/')+1) = '\0';
+     strcat(buf,"lipo");
+  }  
+  lipo_argv[0] = buf;
   lipo_argv[1] = "-create";
   lipo_argv[2] = "-o";
   lipo_argv[3] = out_file;
@@ -625,7 +663,7 @@
    Construct command line for each invocation with one input file.  */
 
 static void
-do_compile_separately (void)
+do_compile_separately ()
 {
   const char **new_new_argv;
   int i, new_new_argc;
@@ -690,7 +728,7 @@
 /* Invoke 'lipo' on set of output files and create multile FAT binaries.  */
 
 static void
-do_lipo_separately (void)
+do_lipo_separately (const char* argv_0)
 {
   int ifn_index;
   struct input_filename *ifn;
@@ -698,7 +736,7 @@
        ifn_index < num_infiles && ifn && ifn->name;
        ifn_index++, ifn = ifn->next)
     do_lipo (ifn_index * num_arches,
-	     strip_path_and_suffix (ifn->name, ".o"));
+	     strip_path_and_suffix (ifn->name, ".o"), argv_0);
 }
 
 /* Remove all options which are architecture-specific and are not for the
@@ -1269,6 +1307,44 @@
   return strdup(symlink_buffer);
 }
 
+int GetExecutablePath(char *buf, size_t *bufsize)
+{
+#if defined(__MINGW32__)
+	if (GetModuleFileName(NULL, buf, (DWORD)*bufsize) != 0) {
+        /* Early conversion to unix slashes instead of more changes
+         * everywhere else... */
+        char *winslash = strchr(buf,'\\');
+        while (winslash) {
+            *winslash = '/';
+            winslash = strchr(winslash,'\\');
+        }
+		return strlen(buf);
+	}
+	return -1;
+#elif (HAVE_DECL_READLINK) /* Linux */
+	return readlink("/proc/self/exe", buf, *bufsize);
+#else
+	return -1; /* Fail on all other systems for now */
+#endif /* __MINGW32__ */
+}
+
+#if defined(__MINGW32__)
+/* We could do better than this:
+ * http://www.codeproject.com/Articles/21202/Reparse-Points-in-Vista
+ * ..in particular though, see the comment "An easier way" by leandrobecker:
+ * Using the FindFirstFile Api together with WIN32_FIND_DATA.dwFileAttributes == FILE_ATTRIBUTE_REPARSE_POINT, 
+ *  WIN32_FIND_DATA.dwReserved0 can be used to detect symbolic links (IO_REPARSE_TAG_SYMLINK)or junctions (IO_REPARSE_TAG_MOUNT_POINT). 
+ * When dwReserved0 is IO_REPARSE_TAG_MOUNT_POINT, the folder can be a junction or a volume mount point (as described by article author).
+ *  To check if is a junction or volume mount point, pass the folder path to GetVolumeNameForVolumeMountPoint. If GetVolumeNameForVolumeMountPoint returns
+ *  TRUE the folder is a volume mount point, if returns FALSE the folder is a junction point if GetLastError is ERROR_INVALID_PARAMETER (0x57).
+ * I think this is easier than dealing with privileges and DeviceIoControl
+ */
+int readlink (char const* src, char* dest, int max)
+{
+    return -1;
+}
+#endif
+
 /* Main entry point. This is gcc driver driver!
    Interpret -arch flag from the list of input arguments. Invoke appropriate
    compiler driver. 'lipo' the results if more than one -arch is supplied.  */
@@ -1281,65 +1357,74 @@
   char *override_option_str = NULL;
   char path_buffer[2*PATH_MAX+1];
   int linklen;
+  char const* argv_0 = argv[0];
+  char buf[1024];
+
+  i = sizeof(buf);
+  if ((linklen = GetExecutablePath (buf, &i)) != -1)
+  {
+      buf[linklen] = '\0';
+      argv_0 = &buf[0];
+  }
 
   total_argc = argc;
   prog_len = 0;
 
-  argv_0_len = strlen (argv[0]);
+  argv_0_len = strlen (argv_0);
 
   /* Get the progname, required by pexecute () and program location.  */
-  prog_len = get_prog_name_len (argv[0]);
+  prog_len = get_prog_name_len (argv_0);
 
-  /* If argv[0] is all program name (no slashes), search the PATH environment
+  /* If argv_0 is all program name (no slashes), search the PATH environment
      variable to get the fully resolved path to the executable. */
   if (prog_len == argv_0_len)
     {
 #ifdef DEBUG
-      progname = argv[0] + argv_0_len - prog_len;
+      progname = argv_0 + argv_0_len - prog_len;
       fprintf (stderr,"%s: before PATH resolution, full progname = %s\n",
-               argv[0]+argv_0_len-prog_len, argv[0]);
+               argv_0+argv_0_len-prog_len, argv_0);
 #endif
-      argv[0] = resolve_path_to_executable (argv[0]);
-      prog_len = get_prog_name_len (argv[0]);
-      argv_0_len = strlen(argv[0]);
+      argv_0 = resolve_path_to_executable (argv_0);
+      prog_len = get_prog_name_len (argv_0);
+      argv_0_len = strlen(argv_0);
     }
 
-  /* If argv[0] is a symbolic link, use the directory of the pointed-to file
+  /* If argv_0 is a symbolic link, use the directory of the pointed-to file
      to find compiler components. */
   /* LLVM LOCAL: loop to follow multiple levels of links */
-  while ((linklen = readlink (argv[0], path_buffer, PATH_MAX)) != -1)
+  while ((linklen = readlink (argv_0, path_buffer, PATH_MAX)) != -1)
     {
-      /* readlink succeeds if argv[0] is a symlink.  path_buffer now contains
+      /* readlink succeeds if argv_0 is a symlink.  path_buffer now contains
 	 the file referenced. */
       path_buffer[linklen] = '\0';
 #ifdef DEBUG
-      progname = argv[0] + argv_0_len - prog_len;
+      progname = argv_0 + argv_0_len - prog_len;
       fprintf (stderr, "%s: before symlink, full prog = %s target = %s\n",
-	       progname, argv[0], path_buffer);
+	       progname, argv_0, path_buffer);
 #endif
-      argv[0] = resolve_symlink(argv[0], path_buffer, argv_0_len, prog_len);
-      argv_0_len = strlen(argv[0]);
+      argv_0 = resolve_symlink(argv_0, path_buffer, argv_0_len, prog_len);
+      argv_0_len = strlen(argv_0);
 
       /* Get the progname, required by pexecute () and program location.  */
-      prog_len = get_prog_name_len (argv[0]);
+      prog_len = get_prog_name_len (argv_0);
 
 #ifdef DEBUG
-      progname = argv[0] + argv_0_len - prog_len;
-      printf("%s: ARGV[0] after symlink = %s\n", progname, argv[0]);
+      progname = argv_0 + argv_0_len - prog_len;
+      printf("%s: ARGV[0] after symlink = %s\n", progname, argv_0);
 #endif
     }
 
-  progname = argv[0] + argv_0_len - prog_len;
+  progname = argv_0 + argv_0_len - prog_len;
 
   /* Setup driver prefix.  */
   prefix_len = argv_0_len - prog_len;
   curr_dir = (char *) malloc (sizeof (char) * (prefix_len + 1));
-  strncpy (curr_dir, argv[0], prefix_len);
+  strncpy (curr_dir, argv_0, prefix_len);
   curr_dir[prefix_len] = '\0';
-  driver_exec_prefix = (argv[0], "/usr/bin", curr_dir);
+  driver_exec_prefix = (argv_0, "/usr/bin", curr_dir);
 
 #ifdef DEBUG
-  fprintf (stderr,"%s: full progname = %s\n", progname, argv[0]);
+  fprintf (stderr,"%s: full progname = %s\n", progname, argv_0);
   fprintf (stderr,"%s: progname = %s\n", progname, progname);
   fprintf (stderr,"%s: driver_exec_prefix = %s\n", progname, driver_exec_prefix);
 #endif
@@ -1632,14 +1717,14 @@
 
 	  /* Make FAT binary by combining individual output files for each
 	     architecture, using 'lipo'.  */
-	  do_lipo (0, out_file);
+	  do_lipo (0, out_file, argv_0);
 	}
       else
 	{
 	  /* Multiple input files are present and IMA is not used.
 	     Which means need to generate multiple FAT files.  */
 	  do_compile_separately ();
-	  do_lipo_separately ();
+	  do_lipo_separately (argv_0);
 	}
     }
 
diff -urN a/fixincludes/Makefile.in b/fixincludes/Makefile.in
--- a/fixincludes/Makefile.in	2013-05-31 00:32:09.564752247 +0100
+++ b/fixincludes/Makefile.in	2013-05-31 00:32:10.311758171 +0100
@@ -53,9 +53,9 @@
 gcc_version := $(shell cat $(srcdir)/../gcc/BASE-VER)
 
 # Directory in which the compiler finds libraries etc.
-libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)
+libsubdir = $(libdir)/llvmgcc/$(target_noncanonical)/$(gcc_version)
 # Directory in which the compiler finds executables
-libexecsubdir = $(libexecdir)/gcc/$(target_noncanonical)/$(gcc_version)
+libexecsubdir = $(libexecdir)/llvmgcc/$(target_noncanonical)/$(gcc_version)
 # Where our executable files go
 itoolsdir = $(libexecsubdir)/install-tools
 # Where our data files go
diff -urN a/fixincludes/mkheaders.in b/fixincludes/mkheaders.in
--- a/fixincludes/mkheaders.in	2013-05-31 00:32:09.560752215 +0100
+++ b/fixincludes/mkheaders.in	2013-05-31 00:32:10.312758179 +0100
@@ -71,9 +71,9 @@
 libdir=@libdir@
 libexecdir=@libexecdir@
 # Directory in which the compiler finds libraries, etc.
-libsubdir=${libdir}/gcc/${target_noncanonical}/${version}
+libsubdir=${libdir}/llvmgcc/${target_noncanonical}/${version}
 # Directory in which the compiler finds executables
-libexecsubdir=${libexecdir}/gcc/${target_noncanonical}/${version}
+libexecsubdir=${libexecdir}/llvmgcc/${target_noncanonical}/${version}
 
 itoolsdir=${libexecsubdir}/install-tools
 itoolsdatadir=${libsubdir}/install-tools
diff -urN a/gcc/collect2.c b/gcc/collect2.c
--- a/gcc/collect2.c	2013-05-31 00:32:09.378750772 +0100
+++ b/gcc/collect2.c	2013-05-31 00:32:10.310758163 +0100
@@ -802,6 +802,7 @@
   const char **object;
   int first_file;
   int num_c_args	= argc+9;
+  char bin_dir[1024];
 
   no_demangle = !! getenv ("COLLECT_NO_DEMANGLE");
 
@@ -904,6 +905,31 @@
   prefix_from_env ("COMPILER_PATH", &cpath);
   prefix_from_env ("PATH", &path);
 
+  {
+   int slashes = 6;
+#if defined(__linux__) || defined(__CYGWIN__)
+  {
+      int len;
+      if ((len = readlink("/proc/self/exe", bin_dir, sizeof(bin_dir)-1)) != -1)
+        {
+          bin_dir[len] = '\0';
+        }
+  }
+#else
+  strcpy(bin_dir,argv[0]);
+#endif
+  /* From: $PREFIX/libexec/gcc/i686-apple-darwin11/4.2.1/collect2
+   *   to: $PREFIX/bin/
+   *   is: remove 5 /'s then append /bin/
+   */
+   while (--slashes && strrchr (bin_dir,DIR_SEPARATOR))
+   {
+     *strrchr (bin_dir,DIR_SEPARATOR) = '\0';
+   }
+   strcat (bin_dir,"/bin/");
+   add_prefix (&path, bin_dir);
+  }
+
   /* Try to discover a valid linker/nm/strip to use.  */
 
   /* Maybe we know the right file to use (if not cross).  */
diff -urN a/gcc/config/darwin.h b/gcc/config/darwin.h
--- a/gcc/config/darwin.h	2013-05-31 00:32:09.552752152 +0100
+++ b/gcc/config/darwin.h	2013-05-31 00:32:10.309758155 +0100
@@ -371,7 +371,7 @@
 
 #ifdef TARGET_SYSTEM_ROOT
 #define LINK_SYSROOT_SPEC \
-  "%{isysroot*:-syslibroot %*;:-syslibroot " TARGET_SYSTEM_ROOT "}"
+  "%{isysroot*:-syslibroot %*;:-syslibroot %J}"
 #else
 #define LINK_SYSROOT_SPEC "%{isysroot*:-syslibroot %*}"
 #endif
diff -urN a/gcc/gcc.c b/gcc/gcc.c
--- a/gcc/gcc.c	2013-05-31 00:32:09.555752176 +0100
+++ b/gcc/gcc.c	2013-05-31 00:32:10.308758147 +0100
@@ -87,6 +87,13 @@
 #include "gcc.h"
 #include "flags.h"
 #include "opts.h"
+#if defined(__MINGW32__)
+ #include <sys/stat.h>
+ #define WINVER 0x0600
+ #define _WIN32_WINNT 0x0600
+ #define WIN32_LEAN_AND_MEAN
+ #include <windows.h>
+#endif
 
 /* By default there is no special suffix for target executables.  */
 /* FIXME: when autoconf is fixed, remove the host check - dj */
@@ -535,6 +542,7 @@
     :D}   else substitutes D.  There can be as many clauses as you need.
           This may be combined with '.', '!', ',', '|', and '*' as above.
  APPLE LOCAL end mainline 2007-03-13 5040758
+ %J Substitute target_system_root
 
  %(Spec) processes a specification defined in a specs file as *Spec:
  %[Spec] as above, but put __ around -D arguments
@@ -1569,25 +1577,33 @@
 #define MD_STARTFILE_PREFIX_1 ""
 #endif
 
+/* These directories are locations set at configure-time based on the
+   --prefix option provided to configure.  Their initializers are
+   defined in Makefile.in.  These paths are not *directly* used when
+   gcc_exec_prefix is set because, in that case, we know where the
+   compiler has been installed, and use paths relative to that
+   location instead.  */
 static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;
-static const char *const standard_exec_prefix_1 = "/usr/libexec/gcc/";
-static const char *const standard_exec_prefix_2 = "/usr/lib/gcc/";
-static const char *md_exec_prefix = MD_EXEC_PREFIX;
+static const char *const standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;
+static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;
+static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
 
+/* For native compilers, these are well-known paths containing
+   components that may be provided by the system.  For cross
+   compilers, these paths are not used.  */
+static const char *const standard_exec_prefix_1 = "/usr/libexec/llvmgcc/";
+static const char *const standard_exec_prefix_2 = "/usr/lib/llvmgcc/";
+static const char *md_exec_prefix = MD_EXEC_PREFIX;
 static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
 static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;
-static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
 static const char *const standard_startfile_prefix_1
   = STANDARD_STARTFILE_PREFIX_1;
 static const char *const standard_startfile_prefix_2
   = STANDARD_STARTFILE_PREFIX_2;
 
+/* A relative path to be used in finding the location of tools
+   relative to the driver.  */
 static const char *const tooldir_base_prefix = TOOLDIR_BASE_PREFIX;
-static const char *tooldir_prefix;
-
-static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;
-
-static const char *standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;
 
 /* Subdirectory to use for locating libraries.  Set by
    set_multilib_dir based on the compilation options.  */
@@ -2857,6 +2873,7 @@
 }
 
 /* Same as add_prefix, but prepending target_system_root to prefix.  */
+/* The target_system_root prefix has been relocated by gcc_exec_prefix.  */
 static void
 add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,
 		      const char *component,
@@ -3065,9 +3082,9 @@
       /* APPLE LOCAL begin verbose help 2920964 */
       if (verbose_flag
 	  && print_help_list
-	  && (!strcmp ("/usr/libexec/gcc/darwin/ppc/as", string)
-	      || !strcmp ("/usr/libexec/gcc/darwin/i386/as", string)
-	      || !strcmp ("ld", string)))
+	  && (strstr ("/as", string)
+	      || strstr ("/as", string)
+	      || strstr ("/ld", string)))
 	{
 	   /* Do nothing.
 	      as and ld do not entertain --help.  */
@@ -3424,6 +3441,31 @@
   linker_options [n_linker_options - 1] = save_string (option, len);
 }
 
+
+int GetExecutablePath(char *buf, size_t *bufsize)
+{
+#if defined(__MINGW32__)
+	if (GetModuleFileName(NULL, buf, (DWORD)*bufsize) != 0) {
+        /* Early conversion to unix slashes instead of more changes
+         * everywhere else... */
+        char *winslash = strchr(buf,'\\');
+        while (winslash) {
+            *winslash = '/';
+            winslash = strchr(winslash,'\\');
+        }
+		return strlen(buf);
+	}
+	return -1;
+#elif defined(__linux__)
+	return readlink("/proc/self/exe", buf, *bufsize);
+#elif defined(__APPLE__)
+    return ((!_NSGetExecutablePath(buf, bufsize))?strlen(buf):0);
+#else
+	return -1; /* Fail on all other systems for now */
+#endif /* __MINGW32__ */
+}
+
+
 /* Create the vector `switches' and its contents.
    Store its length in `n_switches'.  */
 
@@ -3444,6 +3486,8 @@
   char *(*get_relative_prefix) (const char *, const char *,
 				const char *) = NULL;
   /* LLVM LOCAL end no-canonical-prefixes */
+  const char *tooldir_prefix;
+  const char *argv_zero = argv[0];
 
   GET_ENVIRONMENT (gcc_exec_prefix, "GCC_EXEC_PREFIX");
 
@@ -3558,18 +3602,52 @@
      see if we can create it from the pathname specified in argv[0].  */
 
   gcc_libexec_prefix = standard_libexec_prefix;
+
+  char buf[1024];
+  i = sizeof(buf);
+  int len;
+  if ((len = GetExecutablePath (buf, &i)) != -1)
+  {
+      buf[len] = '\0';
+      argv_zero = &buf[0];
+  }
+
+  gcc_libexec_prefix = standard_libexec_prefix;
 #ifndef VMS
   /* FIXME: make_relative_prefix doesn't yet work for VMS.  */
   if (!gcc_exec_prefix)
     {
-      /* LLVM LOCAL begin no-canonical-prefixes */
-      gcc_exec_prefix = get_relative_prefix (argv[0],
-					     standard_bindir_prefix,
+      char* base_prefix;
+      gcc_exec_prefix = make_relative_prefix (argv_zero, standard_bindir_prefix,
 					     standard_exec_prefix);
-      gcc_libexec_prefix = get_relative_prefix (argv[0],
+      gcc_libexec_prefix = make_relative_prefix (argv_zero,
 					     standard_bindir_prefix,
 					     standard_libexec_prefix);
-      /* LLVM LOCAL end no-canonical-prefixes */
+      /* The bit was horribly broken, set gcc_exec_prefix to what
+         we need. Other darwin cross compilers only work because --with-as and
+         --with-ld are passed into configure. Without those, they'd not work
+         for either relocated or non-relocated compilers. */
+
+      /* Calculate the proper prefix, i.e. a folder up from the executable.
+       * Just to get enough space. */
+      base_prefix = concat (argv_zero, spec_machine, "-", NULL);
+      if (strrchr(base_prefix,DIR_SEPARATOR)!=NULL)
+        {
+          char *bin_prefix;
+          /* Our folder layout isn't a normal gcc layout... */
+          *(strrchr(base_prefix,DIR_SEPARATOR)) = '\0';
+          if (strrchr(base_prefix,DIR_SEPARATOR)!=NULL)
+            {
+          *(strrchr(base_prefix,DIR_SEPARATOR)+1) = '\0';
+          bin_prefix = concat (base_prefix, "bin", dir_separator_str, spec_machine, "-", NULL);
+          /* Add for both gcc and binutils for good measure. */
+          add_prefix (&exec_prefixes, bin_prefix, "GCC",
+                       PREFIX_PRIORITY_LAST, 0, 0);
+          add_prefix (&exec_prefixes, bin_prefix, "BINUTILS",
+                       PREFIX_PRIORITY_LAST, 0, 0);
+          free (bin_prefix);
+        }
+       }
       if (gcc_exec_prefix)
 	putenv (concat ("GCC_EXEC_PREFIX=", gcc_exec_prefix, NULL));
     }
@@ -3580,29 +3658,35 @@
 	 / (which is ignored by make_relative_prefix), so append a
 	 program name.  */
       char *tmp_prefix = concat (gcc_exec_prefix, "gcc", NULL);
-      /* LLVM LOCAL begin no-canonical-prefixes */
-      gcc_libexec_prefix = get_relative_prefix (tmp_prefix,
+      gcc_libexec_prefix = make_relative_prefix (tmp_prefix,
 						standard_exec_prefix,
 						standard_libexec_prefix);
-      /* LLVM LOCAL end no-canonical-prefixes */
+
+      /* The path is unrelocated, so fallback to the original setting.  */
+      if (!gcc_libexec_prefix)
+	gcc_libexec_prefix = standard_libexec_prefix;
+
       free (tmp_prefix);
     }
 #else
 #endif
+  /* From this point onward, gcc_exec_prefix is non-null if the toolchain
+     is relocated. The toolchain was either relocated using GCC_EXEC_PREFIX
+     or an automatically created GCC_EXEC_PREFIX from argv[0].  */
 
   if (gcc_exec_prefix)
     {
       int len = strlen (gcc_exec_prefix);
 
-      if (len > (int) sizeof ("/lib/gcc/") - 1
+      if (len > (int) sizeof ("/lib/llvmgcc/") - 1
 	  && (IS_DIR_SEPARATOR (gcc_exec_prefix[len-1])))
 	{
-	  temp = gcc_exec_prefix + len - sizeof ("/lib/gcc/") + 1;
+	  temp = gcc_exec_prefix + len - sizeof ("/lib/llvmgcc/") + 1;
 	  if (IS_DIR_SEPARATOR (*temp)
 	      && strncmp (temp + 1, "lib", 3) == 0
 	      && IS_DIR_SEPARATOR (temp[4])
-	      && strncmp (temp + 5, "gcc", 3) == 0)
-	    len -= sizeof ("/lib/gcc/") - 1;
+	      && strncmp (temp + 5, "llvmgcc", 7) == 0)
+	    len -= sizeof ("/lib/llvmgcc/") - 1;
 	}
 
       set_std_prefix (gcc_exec_prefix, len);
@@ -4195,12 +4279,15 @@
       use_pipes = 0;
     }
 
-  /* Set up the search paths before we go looking for config files.  */
+  /* Set up the search paths.  We add directories that we expect to
+     contain GNU Toolchain components before directories specified by
+     the machine description so that we will find GNU components (like
+     the GNU assembler) before those of the host system.  */
 
-  /* These come before the md prefixes so that we will find gcc's subcommands
-     (such as cpp) rather than those of the host system.  */
-  /* Use 2 as fourth arg meaning try just the machine as a suffix,
-     as well as trying the machine and the version.  */
+  /* If we don't know where the toolchain has been installed, use the
+     configured-in locations.  */
+  if (!gcc_exec_prefix)
+    {
 #ifndef OS2
   add_prefix (&exec_prefixes, standard_libexec_prefix, "GCC",
 	      PREFIX_PRIORITY_LAST, 1, 0);
@@ -4208,51 +4295,35 @@
 	      PREFIX_PRIORITY_LAST, 2, 0);
   add_prefix (&exec_prefixes, standard_exec_prefix, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
+#endif
+      add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
+		  PREFIX_PRIORITY_LAST, 1, 0);
+    }
+  /* If not cross-compiling, search well-known system locations.  */
+  if (*cross_compile == '0')
+    {
+#ifndef OS2
   add_prefix (&exec_prefixes, standard_exec_prefix_1, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
   add_prefix (&exec_prefixes, standard_exec_prefix_2, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
 #endif
-
-  add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
-	      PREFIX_PRIORITY_LAST, 1, 0);
   add_prefix (&startfile_prefixes, standard_exec_prefix_2, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 1, 0);
+    }
 
+  gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));
   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,
 			   dir_separator_str, NULL);
 
-  /* If tooldir is relative, base it on exec_prefixes.  A relative
-     tooldir lets us move the installed tree as a unit.
-
-     If GCC_EXEC_PREFIX is defined, then we want to add two relative
-     directories, so that we can search both the user specified directory
-     and the standard place.  */
-
-  if (!IS_ABSOLUTE_PATH (tooldir_prefix))
-    {
-      if (gcc_exec_prefix)
-	{
-	  char *gcc_exec_tooldir_prefix
-	    = concat (gcc_exec_prefix, spec_machine, dir_separator_str,
+  /* Look for tools relative to the location from which the driver is
+     running, or, if that is not available, the configured prefix.  */
+  tooldir_prefix
+    = concat (gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,
+	      spec_machine, dir_separator_str,
 		      spec_version, dir_separator_str, tooldir_prefix, NULL);
 
 	  add_prefix (&exec_prefixes,
-		      concat (gcc_exec_tooldir_prefix, "bin",
-			      dir_separator_str, NULL),
-		      NULL, PREFIX_PRIORITY_LAST, 0, 0);
-	  add_prefix (&startfile_prefixes,
-		      concat (gcc_exec_tooldir_prefix, "lib",
-			      dir_separator_str, NULL),
-		      NULL, PREFIX_PRIORITY_LAST, 0, 1);
-	}
-
-      tooldir_prefix = concat (standard_exec_prefix, spec_machine,
-			       dir_separator_str, spec_version,
-			       dir_separator_str, tooldir_prefix, NULL);
-    }
-
-  add_prefix (&exec_prefixes,
 	      concat (tooldir_prefix, "bin", dir_separator_str, NULL),
 	      "BINUTILS", PREFIX_PRIORITY_LAST, 0, 0);
   add_prefix (&startfile_prefixes,
@@ -4266,16 +4337,24 @@
      ``make_relative_prefix'' is not compiled for VMS, so don't call it.  */
   if (target_system_root && gcc_exec_prefix)
     {
-      /* LLVM LOCAL begin no-canonical-prefixes */
-      char *tmp_prefix = get_relative_prefix (argv[0],
+      char *target_system_root_with_trailing_slash = (char *)target_system_root;
+      char *tmp_prefix;
+      if (target_system_root[strlen(target_system_root)-1] != DIR_SEPARATOR)
+	{
+	  target_system_root_with_trailing_slash = concat (target_system_root, dir_separator_str, NULL);
+	}
+      tmp_prefix = make_relative_prefix (argv_zero,
 					      standard_bindir_prefix,
-					      target_system_root);
-      /* LLVM LOCAL end no-canonical-prefixes */
+					       target_system_root_with_trailing_slash);
       if (tmp_prefix && access_check (tmp_prefix, F_OK) == 0)
 	{
 	  target_system_root = tmp_prefix;
 	  target_system_root_changed = 1;
 	}
+      if (target_system_root_with_trailing_slash != target_system_root)
+	{
+	  free (target_system_root_with_trailing_slash);
+	}
     }
 #endif
 
@@ -5441,6 +5520,13 @@
 	    }
 	    break;
 
+	  case 'J':
+	    {
+		  do_spec_1 (target_system_root, 1, NULL);
+		  do_spec_1 (" ", 0, NULL);
+	    }
+	    break;
+
 	  case 'o':
 	    {
 	      int max = n_infiles;
@@ -6545,6 +6631,7 @@
   char *specs_file;
   const char *p;
   struct user_specs *uptr;
+  const char* argv_zero = argv[0];
 
   /* APPLE LOCAL begin CC_PRINT_OPTIONS (radar 3313335, 3360444) */
   cc_print_options = getenv ("CC_PRINT_OPTIONS");
@@ -6640,9 +6727,21 @@
   /* Set up to remember the pathname of gcc and any options
      needed for collect.  We use argv[0] instead of programname because
      we need the complete pathname.  */
+#if defined(__linux__) || defined(__CYGWIN__)
+  {
+      char buf[1024];
+      int len;
+      if ((len = readlink("/proc/self/exe", buf, sizeof(buf)-1)) != -1)
+        {
+          buf[len] = '\0';
+          argv_zero = &buf[0];
+        }
+  }
+#endif
+
   obstack_init (&collect_obstack);
   obstack_grow (&collect_obstack, "COLLECT_GCC=", sizeof ("COLLECT_GCC=") - 1);
-  obstack_grow (&collect_obstack, argv[0], strlen (argv[0]) + 1);
+  obstack_grow (&collect_obstack, argv_zero, strlen (argv_zero) + 1);
   putenv (XOBFINISH (&collect_obstack, char *));
 
 #ifdef INIT_ENVIRONMENT
@@ -6788,30 +6887,30 @@
 			      SYSROOT_PRIORITY, 0, 1);
       else if (*cross_compile == '0')
 	{
-	  if (gcc_exec_prefix)
-	    add_prefix (&startfile_prefixes,
-			concat (gcc_exec_prefix, machine_suffix,
-				standard_startfile_prefix, NULL),
-			NULL, PREFIX_PRIORITY_LAST, 0, 1);
 
 	  /* APPLE LOCAL begin ARM sysroot startfile_prefixes */
 	  /* All absolute startfile_prefixes must be sysrooted so we
 	     don't pick up host headers.  */
-	  if (IS_ABSOLUTE_PATH (standard_exec_prefix))
+	  if (IS_ABSOLUTE_PATH (gcc_exec_prefix
+                              ? gcc_exec_prefix : standard_exec_prefix))
 	    add_sysrooted_prefix (&startfile_prefixes,
-				  concat (standard_exec_prefix,
+				  concat (gcc_exec_prefix
+					  ? gcc_exec_prefix : standard_exec_prefix,
 					  machine_suffix,
 					  standard_startfile_prefix, NULL),
 				  NULL, PREFIX_PRIORITY_LAST, 0, 1);
 	  else
 	    add_prefix (&startfile_prefixes,
-			concat (standard_exec_prefix,
+		      concat (gcc_exec_prefix
+			      ? gcc_exec_prefix : standard_exec_prefix,
 				machine_suffix,
 				standard_startfile_prefix, NULL),
 			NULL, PREFIX_PRIORITY_LAST, 0, 1);
 	  /* APPLE LOCAL end ARM sysroot startfile_prefixes */
 	}
 
+      /* Sysrooted prefixes are relocated because target_system_root is
+	 also relocated by gcc_exec_prefix.  */
       if (*standard_startfile_prefix_1)
  	add_sysrooted_prefix (&startfile_prefixes,
 			      standard_startfile_prefix_1, "BINUTILS",
@@ -6857,7 +6956,9 @@
 
   if (print_search_dirs)
     {
-      printf (_("install: %s%s\n"), standard_exec_prefix, machine_suffix);
+      printf (_("install: %s%s\n"),
+	      gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,
+	      gcc_exec_prefix ? "" : machine_suffix);
       printf (_("programs: %s\n"),
 	      build_search_list (&exec_prefixes, "", false, false));
       printf (_("libraries: %s\n"),
diff -urN a/gcc/Makefile.in b/gcc/Makefile.in
--- a/gcc/Makefile.in	2013-05-31 00:32:09.554752168 +0100
+++ b/gcc/Makefile.in	2013-05-31 00:32:10.310758163 +0100
@@ -537,9 +537,9 @@
 # --------
 
 # Directory in which the compiler finds libraries etc.
-libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(version)
+libsubdir = $(libdir)/llvmgcc/$(target_noncanonical)/$(version)
 # Directory in which the compiler finds executables
-libexecsubdir = $(libexecdir)/gcc/$(target_noncanonical)/$(version)
+libexecsubdir = $(libexecdir)/llvmgcc/$(target_noncanonical)/$(version)
 # Used to produce a relative $(gcc_tooldir) in gcc.o
 unlibsubdir = ../../..
 # Directory in which to find other cross-compilation tools and headers.
@@ -1986,8 +1986,8 @@
 
 DRIVER_DEFINES = \
   -DSTANDARD_STARTFILE_PREFIX=\"$(unlibsubdir)/\" \
-  -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc/\" \
-  -DSTANDARD_LIBEXEC_PREFIX=\"$(libexecdir)/gcc/\" \
+  -DSTANDARD_EXEC_PREFIX=\"$(libdir)/llvmgcc/\" \
+  -DSTANDARD_LIBEXEC_PREFIX=\"$(libexecdir)/llvmgcc/\" \
   -DDEFAULT_TARGET_VERSION=\"$(version)\" \
   -DDEFAULT_TARGET_MACHINE=\"$(target_noncanonical)\" \
   -DSTANDARD_BINDIR_PREFIX=\"$(bindir)/\" \
@@ -4382,6 +4382,7 @@
 	@echo "set HOSTCFLAGS \"$(CFLAGS)\"" >> ./tmp0
 	@echo "set TESTING_IN_BUILD_TREE 1" >> ./tmp0
 	@echo "set HAVE_LIBSTDCXX_V3 1" >> ./tmp0
+	@echo "set GCC_EXEC_PREFIX \"$(libdir)/gcc/\"" >> ./tmp0
 # If newlib has been configured, we need to pass -B to gcc so it can find
 # newlib's crt0.o if it exists.  This will cause a "path prefix not used"
 # message if it doesn't, but the testsuite is supposed to ignore the message -
